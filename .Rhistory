# 给同学对象增加新的行为
student.correcting <- function(x) print("帮助老师批改作业")
# 辅助变量用于设置初始值
char0 = character(0)
#实现继承关系
create <- function(classes=char0,parents=char0){
mro <- c(classes)
for(name in parents){
mro <- c(mro,name)
ancestors <- attr(get(name),'type')
mro <- c(mro,ancestors(ancestors != name))
}
return(mro)
}
# 定义构造函数，创建对象
NewInstance <- function(value=0,classes=char0,parents=char0) {
obj <- value
attr(obj,'type') <- create(classes,parents)
attr(obj,"class") <- c('homework','correcting','exam')
return(obj)
}
# 创建对象实例
StudentObj <- NewInstance()
# 创建子对象实例
StudentObj <- NewInstance()
# 创建子对象实例
s1 <- NewInstance("普通同学",classes = 'normal',parent = "StudentObj")
# 给同学对象增加新的行为
student.correcting <- function(x) print("帮助老师批改作业")
# 辅助变量用于设置初始值
char0 = character(0)
#实现继承关系
create <- function(classes=char0,parents=char0){
mro <- c(classes)
for(name in parents){
mro <- c(mro,name)
ancestors <- attr(get(name),'type')
mro <- c(mro,ancestors(ancestors != name))
}
return(mro)
}
# 定义构造函数，创建对象
NewInstance <- function(value=0,classes=char0,parents=char0) {
obj <- value
attr(obj,'type') <- create(classes,parents)
attr(obj,"class") <- c('homework','correcting','exam')
return(obj)
}
# 创建对象实例
StudentObj <- NewInstance()
# 创建子对象实例
StudentObj <- NewInstance()
# 创建子对象实例
s1 <- NewInstance("普通同学",classes = 'normal',parents = "StudentObj")
# 给同学对象增加新的行为
student.correcting <- function(x) print("帮助老师批改作业")
# 辅助变量用于设置初始值
char0 = character(0)
#实现继承关系
create <- function(classes=char0,parents=char0){
mro <- c(classes)
for(name in parents){
mro <- c(mro,name)
ancestors <- attr(get(name),'type')
mro <- c(mro,ancestors(ancestors != name))
}
return(mro)
}
# 定义构造函数，创建对象
NewInstance <- function(value=0,classes=char0,parents=char0) {
obj <- value
attr(obj,'type') <- create(classes,parents)
attr(obj,"class") <- c('homework','correcting','exam')
return(obj)
}
# 创建对象实例
StudentObj <- NewInstance()
# 创建子对象实例
s1 <- NewInstance("普通同学",classes = 'normal',parents = "StudentObj")
install.packages('pryr')
library(pryr)
library(pryr)
#通过变量创建S3对象
x <- 1
attr(x,'class') <- 'foo'
x
attr(x,"class")
class(x)
#用pryr包的otype函数,检查x的类型
otype(x)
mean
# mean 函数
mean()
# mean 函数
mean
ftype(mean)
# t函数
ftype(t)
# plot函数
ftype(plot)
setClass("Person",slots=list(name="character",age="numeric"))
#传入错误age类型
bad <- new("Person",name="bad",age="abc")
# 设置age的非负检查
setValidity("Persion",function(object){
if(object@age <= 0) stop("Age is negative.")
})
# 设置age的非负检查
setValidity("Person",function(object){
if(object@age <= 0) stop("Age is negative.")
})
# 传入小于0的年龄
bad2 <- new("Person",name="bad",age=-1)
# 检查work的类型
ftype(work)
library(pryr)
# 检查work的类型
ftype(work)
library(pryr)
# 检查work的类型
otype(work)
library(pryr)
# 检查work的类型
ftype(work)
# 定义基类Shape
setClass("Shape",slotes=list(name="character"))
# 定义基类Shape
setClass("Shape",slots=list(name="character"))
# 定义圆形类，并继承shape,属性radius默认为1
setClass("Circle",contains = "Shape",slots=list(radius="numeric"),prototype=list(radius=1))
# 验正radius属性值要大于等于0
setValidity("Circle",function(object){
if(object@radius <= 0) stop("Radius is negative")
})
# 创建两个圆形实例
c1 <- new("Circle",name="c1")
c2 <- new ("Circle",name="c2",radius=5)
setGeneric("area",function(obj,...){
standardGeneric("area")
})
# 计算面积的函数实现
setMethod("area","Circle",function(obj,...){
print("Area Circle Method")
pi*obj@radius^2
})
# 分别计算c1和c2的两个圆形的面积
area(c1)
area(c2)
# 计算周长泛型函数接口
setGeneric("circum",function(obj,...){
standardGeneric("circum")
})
# 计算周长的函数实现
setMethod("circum","Circle",function(obj,...){
z*pi*obj@radius
})
# 分别计算c1和c2的周长
circum(c1)
# 计算周长泛型函数接口
setGeneric("circum",function(obj,...){
standardGeneric("circum")
})
# 计算周长的函数实现
setMethod("circum","Circle",function(obj,...){
2*pi*obj@radius
})
# 分别计算c1和c2的周长
circum(c1)
circum(c2)
# 定义椭圆形的类，继承Shape,radius参数默认值为c(1,1)# 分别表示椭圆形的常半径和短半径
setClass("Ellipse",contains = "Shape",slots=list(radius="numeric"),prototype = list(radius=c(1,1)))
# 验证radius参数
setValidity("Ellipse",function(object){
if(length(object@radius)!=2) stop("It's note Ellipse")
if(length(which(object@radius<=0))>0) stop("Radius is negative")
})
# 定义椭圆形的类，继承Shape,radius参数默认值为c(1,1)# 分别表示椭圆形的常半径和短半径
setClass("Ellipse",contains = "Shape",slots=list(radius="numeric"),prototype = list(radius=c(1,1)))
# 验证radius参数
setValidity("Ellipse",function(object){
if(length(object@radius)!=2) stop("It's note Ellipse")
if(length(which(object@radius<=0))>0) stop("Radius is negative")
})
# 创建两个椭圆形实例e1,e2
e1 <- new("Ellipse",name="e1")
e2 <- new("Ellipse",name="e2",radius=c(5,1))
# 计算椭圆形面积的函数的实现
setMethod("area",'Ellipse',function(obj,...){
print("Area Ellipse Method")
pi*prod(obj@radius)
})
# 计算e1,e2的面积
area(e1)
area(e2)
# 计算椭圆形周长的函数实现
setMethod("circum","Ellipse",function(obj,...){
cat("Ellipse Circum:\n")
2*pi*sqrt((obj@radius[1]^2+obj@radius[2]^2)/2)
})
# 计算e1,e2周长
circum(e1)
circum(e2)
# 基类Shape
setClass("Shape",slots=list(name="character",shape="character"))
# Ellipse继承Shape
setClass("Ellipse",contains = "Shape",slots=list(radius="numeric"),prototype = list(radius=c(1,1),shape="Ellipse"))
# Circle继承Ellipse
setClass("Circle",contains = "Ellipse",slots=list(radius=1,shape="Circle"))
# 基类Shape
setClass("Shape",slots=list(name="character",shape="character"))
# Ellipse继承Shape
setClass("Ellipse",contains = "Shape",slots=list(radius="numeric"),prototype = list(radius=c(1,1),shape="Ellipse"))
# Circle继承Ellipse
setClass("Circle",contains = "Ellipse",slots=list(radius=1),shape="Circle")
# 基类Shape
setClass("Shape",slots=list(name="character",shape="character"))
# Ellipse继承Shape
setClass("Ellipse",contains = "Shape",slots=list(radius="numeric"),prototype = list(radius=c(1,1),shape="Ellipse"))
# Circle继承Ellipse
setClass("Circle",contains = "Ellipse",slots=list(radius="numeric"),prototype=list(radius=1,shape="Circle"))
# 定义area接口
setGeneric("area",function(obj,...) standardGeneric("area"))
# 定义area的Ellipse实现
setMethod("area","Ellipse",function(obj,...){
cat("Ellipse Area: \n")
pi*prod(obj@radius)
})
# 定义area的Circle实现
setMethod("area","Circle",function(obj,...){
cat("Circle Area:\n")
pi*obj@radius^2
})
